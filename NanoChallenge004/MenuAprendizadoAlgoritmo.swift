//
//  MenuAprendizado1.swift
//  NanoChallenge004
//
//  Created by Matheus Cavalcanti de Arruda on 26/05/22.
//

import Foundation

class MenuAprendizadoAlgoritmo {
    
    // MARK: Menu Aprendizado
    
    func openMenu() {
        
        let console: ConsoleIO = .init()
        var condicao = true
        
        console.consoleWrite("\n‚û§ Ol√°, tudo bem?", as: .written)
        console.consoleWrite("‚û§ O nosso objetivo √© aprender a fazer um algoritmo de ordena√ß√£o chamado Bubble Sort, com ele √© poss√≠vel ordenar uma sequ√™ncia de valores de forma crescente ou decrescente. Mas, antes de chegarmos em nosso objetivo √© necess√°rio entender alguns conceitos sobre programa√ß√£o.", as: .written)
        
        while condicao {
            
            console.consoleWrite("\n‚û§ Voc√™ est√° pronto?", as: .written)
            console.consoleWrite("\n\t[Sim]\t[N√£o]", as: .written)
            
            console.consoleWrite("\nEscolha: ", as: .normal)
            let input = console.getStringInput()
            
            switch input.lowercased() {
            case "sim", "s":
                console.consoleWrite("\n‚û§ Perfeito!", as: .written)
                condicao = false
                algoritmo()
            case "nao", "n":
                aguardar()
            default:
                console.consoleWrite("Op√ß√£o inv√°lida.", as: .error)
            }
        }
    }
    
    private func aguardar() {
        
        let console: ConsoleIO = .init()
        
        console.consoleWrite("\n‚û§ ... Okay. D√™ uma respirada antes de continuarmos.", as: .written)
        
        for i in 1...10 {
            sleep(1)
            console.consoleWrite("\(i) ", as: .normal)
        }
        console.consoleWrite("\n", as: .normal)
    }
    
    // MARK: Explica√ß√£o sobre algoritmos
    
    private func algoritmo() {
        
        let console: ConsoleIO = .init()
        
        console.consoleWrite("\n‚û§ Vamos come√ßar entendendo o que s√£o algoritmos.", as: .written)
        console.consoleWrite("\n‚û§ Por mais incr√≠vel que pare√ßa os computadores n√£o pensam sozinhos üò±! Tudo que eles fazem s√£o seguir conjuntos de regras e procedimentos l√≥gicos bem definidos em etapas finitas (possuem come√ßo, meio e fim).", as: .written)
        console.consoleWrite("\n‚û§ Podemos imaginar que uma receita funciona de forma semelhante a um algoritmo, j√° que na parte de \"modo de preparo\" existe uma sequ√™ncia l√≥gica que devemos seguir.", as: .written)
        console.consoleWrite("\n‚û§ Aqui est√° um passo a passo de como fazer um ovo cozido:", as: .written)
        console.consoleWrite("\n‚û§ 1 - Leve uma panela pequena com √°gua ao fogo m√©dio. Quando ferver, com cuidado e o¬† aux√≠lio de uma colher, mergulhe o ovo e abaixe o fogo (se voc√™ colocar o ovo com cuidado,¬†a casca n√£o trinca).¬† Se preferir, com uma agulha fa√ßa um furinho na base do ovo e adicione caldo de lim√£o √† √°gua (ele ajuda a manter a casca do ovo sem rachaduras). Mas basta colocar o ovo com delicadeza que a casca fica inteira.", as: .normal)
        console.consoleWrite("\n‚û§ 2 - Conte os minutos. Para¬†gema cozida, mas sem passar do ponto, 12 minutos.¬† Para a¬†gema cremosa, 7 minutos. Para o ovo mollet¬†(clara cozida firme e gema mais l√≠quida), 6 minutos. Para o ovo quente¬†(clara cozida macia e gema bem mole), 4 minutos.", as: .normal)
        console.consoleWrite("\n‚û§ 3 - Com uma colher, tire o ovo da panela e mergulhe numa tigela com √°gua fria filtrada at√© ele amornar. Para descascar, role delicadamente o ovo sobre a t√°bua e v√° puxando os pedacinhos de casca. Passe novamente o ovo na tigela com √°gua para descartar qualquer casquinha que tenha sobrado.", as: .normal)
        console.consoleWrite("\n\n‚û§ Esse √© um bom exemplo, j√° que informa o passo a passo de forma correta e est√° bem definido. Mas, para um computador seria um pouco mais detalhado:", as: .written)
        console.consoleWrite("\n‚û§ Pegue uma panela pequena\n‚û§ Encha a panela com √°gua at√© duas alturas do ovo\n‚û§ Coloque a panela no fog√£o\n‚û§ Ascenda o fog√£o com temperatura de 100¬∫C\n‚û§ Se a √°gua estiver fervendo, coloque o ovo na panela\n‚û§ Abaixe a temperatura do fog√£o para 80¬∫C\n‚û§ ...\n", as: .normal)
        console.consoleWrite("\n‚û§ Com isso j√° √© poss√≠vel ter uma no√ß√£o b√°sica do que √© um algoritmo. Agora vamos come√ßar a falar sobre vari√°veis.", as: .written)
        
        var condicao = true
        while condicao {
            
            console.consoleWrite("\n‚û§ Voc√™ est√° pronto?", as: .written)
            console.consoleWrite("\n\t[Sim]\t[N√£o]", as: .written)
            
            console.consoleWrite("\nEscolha: ", as: .normal)
            let input = console.getStringInput()
            
            switch input.lowercased() {
            case "sim", "s":
                console.consoleWrite("\n‚û§ Perfeito!", as: .written)
                condicao = false
                variaves()
            case "nao", "n":
                aguardar()
            default:
                console.consoleWrite("Op√ß√£o inv√°lida.", as: .error)
            }
        }
    }
    
    // MARK: Explica√ß√£o sobre vari√°veis
    
    private func variaves() {
        let console: ConsoleIO = .init()
        
        console.consoleWrite("\n‚û§ Na programa√ß√£o, uma vari√°vel √© um objeto (uma posi√ß√£o, frequentemente localizada na mem√≥ria) capaz de reter e representar um valor ou express√£o. Enquanto as vari√°veis s√≥ \"existem\" em tempo de execu√ß√£o, elas s√£o associadas a \"nomes\", chamados identificadores, durante o tempo de desenvolvimento.", as: .written)
        console.consoleWrite("\n‚û§ √â poss√≠vel separar vari√°veis por seus tipos. Em Swift os tipos s√£o:", as: .written)
        console.consoleWrite("\n‚û§ Character (caracter)", as: .written)
        console.consoleWrite("\t‚û§ Exemplo: var letra: Character = \"A\"", as: .written)
        console.consoleWrite("\n‚û§ String (conjunto de caracteres)", as: .written)
        console.consoleWrite("\t‚û§ Exemplo: var palavra: String = \"Manhattan The Great\"", as: .written)
        console.consoleWrite("\n‚û§ Int (n√∫meros inteiros)", as: .written)
        console.consoleWrite("\t‚û§ Exemplo: var numero: Int = 15", as: .written)
        console.consoleWrite("\n‚û§ Float (n√∫meros com casas decimais)", as: .written)
        console.consoleWrite("\t‚û§ Exemplo: var numeroDecimal: Character = 15.5", as: .written)
        console.consoleWrite("\n‚û§ Double (Da mesma forma que o Float √© uma vari√°vel para n√∫meros decimais, por√©m √© mais precisa)", as: .written)
        console.consoleWrite("\t‚û§ Exemplo: var numeroMaisQueDecimal: Double = 3.14159265359", as: .written)
        console.consoleWrite("\n‚û§ Bool (valores booleanos, true ou false)", as: .written)
        console.consoleWrite("\t‚û§ Exemplo: var verdade: Bool = true", as: .written)
        
        console.consoleWrite("\n‚û§ Para fazer o nosso algoritmo de ordena√ß√£o n√≥s iremos usar vari√°veis do tipo inteiro (Int). Mas, para fazer uma ordena√ß√£o √© necess√°rio possuirmos mais de uma vari√°vel e podemos fazer isso usando vetores.", as: .written)
        
        var condicao = true
        while condicao {
            
            console.consoleWrite("\n‚û§ Vamos falar sobre vetores?", as: .written)
            console.consoleWrite("\n\t[Sim]\t[N√£o]", as: .written)
            
            console.consoleWrite("\nEscolha: ", as: .normal)
            let input = console.getStringInput()
            
            switch input.lowercased() {
            case "sim", "s":
                console.consoleWrite("\n‚û§ (Ôæâ‚óï„ÉÆ‚óï)Ôæâ", as: .written)
                condicao = false
                vetores()
            case "nao", "n":
                aguardar()
            default:
                console.consoleWrite("Op√ß√£o inv√°lida.", as: .error)
            }
        }
    }
    
    // MARK: Explica√ß√£o vetores
    
    private func vetores() {
        let console: ConsoleIO = .init()
        
        console.consoleWrite("\n‚û§ Um vetor √© um cont√™iner gen√©rico de prop√≥sito geral para armazenar uma cole√ß√£o de elementos e √© usado comumente em todos os tipos de programas Swift. Voc√™ pode criar uma matriz usando um literal de matriz, que √© uma lista de valores separados por v√≠rgulas entre colchetes. Um exemplo de Array com n√∫meros inteiros ([Int]):", as: .written)
        console.consoleWrite("\t‚û§ var vetor: [Int] = [40, 62, 85, 24, 8, 70, 84, 73, 27, 94]", as: .written)
        console.consoleWrite("\n‚û§ Cada vari√°vel que est√° dentro do vetor possui uma posi√ß√£o, ou como √© chamado na programa√ß√£o \"index\". O n√∫mero de cada index √© dado pelo tamanho do vetor menos um (n - 1), j√° que a contagem come√ßa no 0.", as: .written)
        console.consoleWrite("\n‚û§ Para acessar o valor em uma certa posi√ß√£o de um vetor √© utilizado o n√∫mero do index entre chaves, como no exemplo:", as: .written)
        console.consoleWrite("\t‚û§ let numero = vetor[2]", as: .written)
        console.consoleWrite("\n‚û§ No caso acima o valor que a vari√°vel 'numero' receberia seria o 85 do vetor criado anteriormente.", as: .written)
        console.consoleWrite("\n‚û§ Agora que j√° sabemos que podemos armazenar muitas vari√°veis em um vetor precisamos saber como percorr√™-lo valor por valor.", as: .written)
        
        var condicao = true
        while condicao {
            
            console.consoleWrite("\n‚û§ Est√° pronto para os La√ßos de Repeti√ß√£o?", as: .written)
            console.consoleWrite("\n\t[Sim]\t[N√£o]", as: .written)
            
            console.consoleWrite("\nEscolha: ", as: .normal)
            let input = console.getStringInput()
            
            switch input.lowercased() {
            case "sim", "s":
                console.consoleWrite("\n‚û§ A√≠ sim!", as: .written)
                condicao = false
                loops()
            case "nao", "n":
                aguardar()
            default:
                console.consoleWrite("Op√ß√£o inv√°lida.", as: .error)
            }
        }
    }
    
    // MARK: Explica√ß√£o loops
    
    private func loops() {
        
        let console: ConsoleIO = .init()
        
        console.consoleWrite("\n‚û§ La√ßos de repeti√ß√£o, tamb√©m conhecidos como la√ßos de itera√ß√£o ou simplesmente loops, s√£o comandos que permitem itera√ß√£o de c√≥digo, ou seja, que comandos presentes no bloco sejam repetidos diversas vezes. Atrav√©s de la√ßos de repeti√ß√£o √© poss√≠vel criar programas que percorram vetores, analisando individualmente cada elemento, e at√© mesmo criar trechos de c√≥digo que sejam repetidos at√© que certa condi√ß√£o estabelecida seja cumprida.", as: .written)
        
        console.consoleWrite("\n‚û§ Em Swift os tr√™s principais la√ßos de itera√ß√£o s√£o: for-in, while, repeat-while", as: .written)
        
        console.consoleWrite("\n‚û§ O la√ßo 'for-in' √© usado para executar um bloco de c√≥digos por n quantidade de vezes, geralmente utilizado para iterar vetores. ", as: .written)
        console.consoleWrite("\n‚û§ Utilizando como exemplo o vetor [40, 62, 85, 24, 8] iremos iterar (passar de valor em valor do vetor) utilizando o la√ßo de recepti√ß√£o 'for-in", as: .written)
        console.consoleWrite("\n\tfor numero in vetor {\n\t\tprint(numero)\n\t}", as: .written)
        console.consoleWrite("\n‚û§ O que sair√° no console ser√°:\n\n40\n62\n85\n24\n8", as: .written)
        console.consoleWrite("\n‚û§ Tamb√©m √© poss√≠vel fazer uma itera√ß√£o usando 'Range' junto com o 'for-in. Exemplo:", as: .written)
        console.consoleWrite("\n\t for i in 0...10 {\n\t\tprint(i)\n\t}", as: .written)
        console.consoleWrite("\n‚û§ O que sair√° no console ser√°:\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10", as: .written)
        console.consoleWrite("\n‚û§ Os la√ßos de repeti√ß√£o 'while' e 'repeat-while' funcionam quase da mesma forma. A l√≥gica √© que eles ficam repetindo o bloco de c√≥digo at√© que alguma condi√ß√£o se torne verdadeira, a √∫nica diferen√ßa √© que no la√ßo 'while' a verifica√ß√£o √© feita toda vez antes de executar o bloco de c√≥digo e com o la√ßo 'repeat-while' a verifica√ß√£o √© toda vez depois que o bloco de c√≥digo executar. O loop acontece at√© que a condi√ß√£o se torne falsa, exemplo:", as: .written)
        console.consoleWrite("\n\tvar numero = 0\n\n\twhile numero < 5 {\n\t\tprint(numero)\n\t\tnumero = numero + 1\n\t}", as: .written)
        console.consoleWrite("\n‚û§ No exemplo acima o la√ßo se repetir√° at√© o momento que a vari√°vel 'numero' for maior ou igual a 5. O que sair√° no console ser√°:\n\n0\n1\n2\n3\n4", as: .written)
        console.consoleWrite("\n‚û§ Junto com o exemplo dos la√ßos 'while' e 'repear-while' veio um novo conceito que √© chamado de Condicionais.", as: .written)
        
        var condicao = true
        while condicao {
            
            console.consoleWrite("\n‚û§ Vamos falar sobre Condicionais?", as: .written)
            console.consoleWrite("\n\t[Sim]\t[N√£o]", as: .written)
            
            console.consoleWrite("\nEscolha: ", as: .normal)
            let input = console.getStringInput()
            
            switch input.lowercased() {
            case "sim", "s":
                console.consoleWrite("\n‚û§ A√≠ sim!", as: .written)
                condicao = false
                condicionais()
            case "nao", "n":
                aguardar()
            default:
                console.consoleWrite("Op√ß√£o inv√°lida.", as: .error)
            }
        }
    }
    
    //MARK: Explica√ß√£o condicionais
    
    private func condicionais() {
        let console: ConsoleIO = .init()
        
        console.consoleWrite("\n‚û§ As estruturas condicionais permitem que um programa execute diferentes comandos de acordo com as condi√ß√µes estabelecidas.", as: .written)
        console.consoleWrite("\n‚û§ No Swift as estruturas condicionais mais utilizadas s√£o 'if', 'else if', 'else', e 'switch-case'", as: .written)
        console.consoleWrite("\n‚û§ Junto com as estruturas condicionais s√£o utilizadas os operadores condicionais, que s√£o:\n\t‚û§ Igual: ==\n\t‚û§ Diferente: !=\n\t‚û§ Menor que: <\n\t‚û§ Maior que: >\n\t‚û§ Menor igual que: <=\n\t‚û§ Maior igual que: >=", as: .written)
        console.consoleWrite("\n‚û§ Um exemplo com a estrutura 'if', 'else if', 'else':", as: .written)
        console.consoleWrite("\n\tvar numero = 5\n\n\tif numero < 5 {\n\t\tprint(\"N√∫mero menor que 5\")\n\t} else if numero == 5 {\n\t\tprint(\"N√∫mero √© igual a 5\")\n\t} else {\n\t\tprint(\"N√∫mero maior que 5\")\n\t}", as: .written)
        console.consoleWrite("\n‚û§ O que sair√° no console ser√°:\n\nN√∫mero √© igual a 5", as: .written)
        console.consoleWrite("\n‚û§ Com as explica√ß√µes dadas at√© agora n√≥s conseguimos construir o algoritmo Bubble Sort.", as: .written)
        
        var condicao = true
        while condicao {
            
            console.consoleWrite("\n‚û§ Preparado para contruirmos o nosso algoritmo de orneda√ß√£o?", as: .written)
            console.consoleWrite("\n\t[Sim]\t[N√£o]", as: .written)
            
            console.consoleWrite("\nEscolha: ", as: .normal)
            let input = console.getStringInput()
            
            switch input.lowercased() {
            case "sim", "s":
                console.consoleWrite("\n‚û§ A√≠ sim!", as: .written)
                condicao = false
                aboutBubble()
            case "nao", "n":
                aguardar()
            default:
                console.consoleWrite("Op√ß√£o inv√°lida.", as: .error)
            }
        }
    }
    
    //MARK: Explica√ß√£o sobre Bubble Sort
    
    private func aboutBubble() {
        let console: ConsoleIO = .init()
        
        console.consoleWrite("\n‚û§ O bubble sort, ou ordena√ß√£o por flutua√ß√£o (literalmente \"por bolha\"), √© um algoritmo de ordena√ß√£o dos mais simples. A ideia √© percorrer o vector diversas vezes, e a cada passagem fazer flutuar para o topo o maior elemento da sequ√™ncia. Essa movimenta√ß√£o lembra a forma como as bolhas em um tanque de √°gua procuram seu pr√≥prio n√≠vel, e disso vem o nome do algoritmo.", as: .written)
        console.consoleWrite("\n‚û§ No melhor caso, o algoritmo executa n opera√ß√µes relevantes, onde n representa o n√∫mero de elementos do vector. No pior caso, s√£o feitas n^2 opera√ß√µes. A complexidade desse algoritmo √© de ordem quadr√°tica. Por isso, ele n√£o √© recomendado para programas que precisem de velocidade e operem com quantidade elevada de dados.", as: .written)
        console.consoleWrite("\n‚û§ Este algoritmo percorre a lista de itens orden√°veis do in√≠cio ao fim, verificando a ordem dos elementos dois a dois, e trocando-os de lugar se necess√°rio. Percorre-se a lista at√© que nenhum elemento tenha sido trocado de lugar na passagem anterior.", as: .written)
        console.consoleWrite("\n‚û§ A implementa√ß√£o do algoritmo Bubble Sort fica assim:", as: .written)
        console.consoleWrite("\n\tfor _ in vetor {\n\n\t\tvar naoHouveTroca = true\n\n\t\tfor j in 0...(vetor.count - 1) {\n\n\t\t\tif vetor[j] > vetor[j + 1] {\n\t\t\t\tvar aux = vetor[j]\n\t\t\t\tvetor[j] = vetor[j + 1]\n\t\t\t\tvetor[j + 1] = aux\n\n\t\t\t\tnaoHouveTroca = false\n\t\t\t}\n\t\t}\n\t\tif naoHouveTroca {\n\t\t\tbreak\n\t\t}\n\t}", as: .written)
        
        var condicao = true
        while condicao {
            
            console.consoleWrite("\n‚û§ Vamos dar uma olhada no c√≥digo funcionando na pr√°tica?", as: .written)
            console.consoleWrite("\n\t[Sim]\t[N√£o]", as: .written)
            
            console.consoleWrite("\nEscolha: ", as: .normal)
            let input = console.getStringInput()
            
            switch input.lowercased() {
            case "sim", "s":
                condicao = false
                let menuBubble: MenuBubbleSort = .init()
                menuBubble.openMenu()
            case "nao", "n":
                aguardar()
            default:
                console.consoleWrite("Op√ß√£o inv√°lida.", as: .error)
            }
        }
    }
}
